{"version":3,"sources":["app/App.module.scss","app/App.js","serviceWorker.js","index.js"],"names":["module","exports","mainWindow","window","require","remote","getCurrentWindow","ipcRenderer","App","useState","status","setStatus","id","setId","title","setTitle","url","setUrl","isLoading","setLoading","topbar","setTopbar","isTop","setIsTop","document","querySelector","webview","setWebview","useEffect","on","event","valid","test","length","top","classes","webviewContainer","up","className","layout","topbarWrap","onMouseEnter","onMouseLeave","btnWindow","onClick","goBack","goForward","stop","reload","send","handlerDevToolsWindow","handlerDownWindow","handlerTopWindow","minimize","unmaximize","maximize","closeWindow","close","content","src","join","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67e17210.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"App_layout__3OLeq\",\"topbarWrap\":\"App_topbarWrap__30IoH\",\"topbar\":\"App_topbar__2iozl\",\"webviewContainer\":\"App_webviewContainer__3uWxM\",\"up\":\"App_up__1R3wo\",\"title\":\"App_title__1ex8a\",\"btnWindow\":\"App_btnWindow__kPo13\",\"closeWindow\":\"App_closeWindow__3j-Mb\"};","import React, { useState, useEffect } from 'react';\r\nimport classes from './App.module.scss';\r\n\r\nconst { remote } = window.require('electron');\r\nconst mainWindow = remote.getCurrentWindow();\r\nconst electron = window.require('electron');\r\nconst ipcRenderer = electron.ipcRenderer;\r\n\r\nconst App = () => {\r\n    const [status, setStatus] = useState(false);\r\n    // eslint-disable-next-line\r\n    const [id, setId] = useState('');\r\n    const [title, setTitle] = useState('Wrapps Browser');\r\n    const [url, setUrl] = useState('');\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [topbar, setTopbar] = useState(false);\r\n    const [isTop, setIsTop] = useState(false);\r\n    const [webview, setWebview] = useState(document.querySelector('webview'));\r\n\r\n    useEffect(() => {\r\n        setWebview(document.querySelector('webview'));\r\n\r\n        ipcRenderer.on('urlOpen', (event, id, title, url) => {\r\n            let valid = /^(ftp|http|https):\\/\\/[^ \"]+$/.test(url);\r\n            if (url.length !== 0 && valid) {\r\n                setId(id);\r\n                setTitle(title);\r\n                setUrl(url);\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    const handleGoBack = () => {\r\n        webview.goBack();\r\n    };\r\n\r\n    const handleGoForward = () => {\r\n        webview.goForward();\r\n    };\r\n\r\n    const handleReload = () => {\r\n        if (isLoading) {\r\n            webview.stop();\r\n            setLoading(false);\r\n        } else {\r\n            webview.reload();\r\n            setLoading(true);\r\n        }\r\n    };\r\n\r\n    const handleMinimizeWindow = () => {\r\n        mainWindow.minimize();\r\n    };\r\n\r\n    const handleMaximizeWindow = () => {\r\n        if (status) {\r\n            mainWindow.unmaximize();\r\n            setStatus(!status);\r\n        } else {\r\n            mainWindow.maximize();\r\n            setStatus(!status);\r\n        }\r\n    };\r\n\r\n    const handleCloseWindow = () => {\r\n        mainWindow.close();\r\n    };\r\n\r\n    const handleTopbarUp = () => {\r\n        setTopbar(true);\r\n    };\r\n\r\n    const handleTopbarDown = () => {\r\n        setTopbar(false);\r\n    };\r\n\r\n    const handlerTopWindow = (id) => {\r\n        ipcRenderer.send('on-top-browser', id, true);\r\n        setIsTop(!isTop);\r\n    };\r\n\r\n    const handlerDownWindow = (id) => {\r\n        ipcRenderer.send('on-top-browser', id, false);\r\n        setIsTop(!isTop);\r\n    };\r\n\r\n    const handlerDevToolsWindow = (id) => {\r\n        ipcRenderer.send('on-devtools', id);\r\n    };\r\n\r\n    const top = [classes.webviewContainer, topbar ? classes.up : ''];\r\n\r\n    return (\r\n        <div className={classes.layout}>\r\n            <div className={classes.topbarWrap}>\r\n                <div\r\n                    className={classes.topbar}\r\n                    onMouseEnter={handleTopbarUp}\r\n                    onMouseLeave={handleTopbarDown}\r\n                >\r\n                    <div>\r\n                        <button\r\n                            className={classes.btnWindow}\r\n                            onClick={handleGoBack}\r\n                        >\r\n                            <i className=\"fal fa-chevron-circle-left\" />\r\n                        </button>\r\n                        <button\r\n                            className={classes.btnWindow}\r\n                            onClick={handleGoForward}\r\n                        >\r\n                            <i className=\"fal fa-chevron-circle-right\" />\r\n                        </button>\r\n                        <button\r\n                            className={classes.btnWindow}\r\n                            onClick={handleReload}\r\n                        >\r\n                            <i className=\"fal fa-sync\" />\r\n                        </button>\r\n                    </div>\r\n                    <div className={classes.title}>\r\n                        {title} - <span>{url}</span>\r\n                    </div>\r\n                    <div>\r\n                        <button\r\n                            className={classes.btnWindow}\r\n                            onClick={() => handlerDevToolsWindow(id)}\r\n                        >\r\n                            <i className=\"fal fa-tools\" />\r\n                        </button>\r\n                        {isTop ? (\r\n                            <button\r\n                                className={classes.btnWindow}\r\n                                onClick={() => handlerDownWindow(id)}\r\n                                title=\"Unpin on top of all\"\r\n                            >\r\n                                <i className=\"fal fa-arrow-from-top\"></i>\r\n                            </button>\r\n                        ) : (\r\n                            <button\r\n                                className={classes.btnWindow}\r\n                                onClick={() => handlerTopWindow(id)}\r\n                                title=\"Pin on top of all\"\r\n                            >\r\n                                <i className=\"fal fa-arrow-to-top\"></i>\r\n                            </button>\r\n                        )}\r\n                        <button\r\n                            className={classes.btnWindow}\r\n                            onClick={handleMinimizeWindow}\r\n                        >\r\n                            <i className=\"fal fa-window-minimize\" />\r\n                        </button>\r\n                        <button\r\n                            className={classes.btnWindow}\r\n                            onClick={handleMaximizeWindow}\r\n                        >\r\n                            <i className=\"fal fa-window-maximize\" />\r\n                        </button>\r\n                        <button\r\n                            className={\r\n                                classes.btnWindow + ' ' + classes.closeWindow\r\n                            }\r\n                            onClick={handleCloseWindow}\r\n                        >\r\n                            <i className=\"fal fa-window-close\" />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <main className={classes.content}>\r\n                <webview src={url} className={top.join(' ')}></webview>\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.module.scss';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}